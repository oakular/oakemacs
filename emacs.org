#+TITLE: An Emacs configuration
#+AUTHOR: Callum Warrilow
* Frame
  #+NAME: frame
  #+BEGIN_SRC emacs-lisp
    (line-number-mode t)
    (column-number-mode t)
    (size-indication-mode t)
  #+END_SRC

  Enable yes and no answers from ~y~ and ~n~.
  #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC
* Identity
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Callum Warrilow"
	  user-mail-address "callum_warrilow@outlook.com")
  #+END_SRC
* Sane Defaults
  Customize settings will be stored in a separate file.
  #+BEGIN_SRC emacs-lisp noweb
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (show-paren-mode 1)
    (setq-default indent-tabs-mode nil)
    (save-place-mode 1)
    (setq visible-bell t)

    (defun oak/reload-config () "Reloads the configuration."
           (interactive)
           (load-file (expand-file-name "init.el" user-emacs-directory)))

    (defun oak/open-config () "Open the configuration project in a dired buffer."
              (interactive)
              (dired user-emacs-directory))

    (defun oak/backup-init (dirname) "Sets a backup directory under user-emacs-directory"
           (let ((oak-backup-dir (concat user-emacs-directory dirname)))
             (unless (file-directory-p oak-backup-dir)
               (make-directory oak-backup-dir t))
             (setq backup-directory-alist
                   `(("." . ,oak-backup-dir)))))

    (oak/backup-init "backups")

    (defun oak/add-auto-mode (ext mode) "Appends to pairing parameter to the auto-mode alist"
           (add-to-list 'auto-mode-alist '((concat "\\" ext "\\'") . mode)))

  #+END_SRC
* Package Management Setup
  We set the load path ourselves, and disable ~package.el~ from
  fetching and updating automatically.
  #+BEGIN_SRC emacs-lisp
    (eval-and-compile
      (setq load-prefer-newer t
            package-user-dir (expand-file-name "pkg" user-emacs-directory)
            package--init-file-ensured t
            package-enable-at-startup nil)

      (setq oak-lisp-path (expand-file-name (concat user-emacs-directory "lisp")))
      (add-to-list 'load-path oak-lisp-path)

      (unless (file-directory-p package-user-dir)
        (make-directory package-user-dir t)))

    (defun oak/instantiate-load-path ()
      "Add all subdirectories of package-user-dir to the load-path"
      (let ((default-directory package-user-dir))
        (normal-top-level-add-subdirs-to-load-path)))


  #+END_SRC

  Install [[https://github.com/jwiegley/use-package][use-package]]
  #+BEGIN_SRC emacs-lisp
    (eval-when-compile
      (require 'package)

      (unless (assoc-default "melpa" package-archives)
        (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
      (unless (assoc-default "org" package-archives)
        (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

      (package-initialize)
      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))

      (require 'use-package)
      (setq use-package-always-ensure t
            use-package-always-defer t
            use-package-verbose t))
  #+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
  (defun oak/setup-fonts () "Setup basic font configuration."
         (let ((monospace-font "Cascadia Mono PL-9"))
           (set-face-attribute 'default nil :font monospace-font)
           (set-face-attribute 'fixed-pitch nil :font monospace-font))
           (if WINDOWS (set-face-attribute 'variable-pitch nil :font "Arial-10")
                 (set-face-attribute 'variable-pitch nil :font "Free Sans-10")))

  (use-package modus-themes
    :ensure t
    :demand
    :pin gnu
    :config
    (setq modus-themes-paren-match 'subtle-bold)
    (setq modus-themes-mode-line '3d)
    (setq modus-themes-org-agenda '((header-block . (variable-pitch scale-title))
                                    (header-date . (workaholic bold-today))
                                    (habit . simplified)))
    ;; (setq modus-themes-bold-constructs t)
    (load-theme 'modus-operandi t))

  (defvar oak-dark-theme 'modus-vivendi)
  (defvar oak-light-theme 'modus-operandi)

  (defun oak/load-dark-theme ()
    (interactive)
    (setq modus-themes-syntax 'faint)
    (load-theme oak-dark-theme t))

  (defun oak/load-light-theme ()
    (interactive)
    (setq modus-themes-syntax 'alt-syntax)
    (load-theme oak-light-theme t))

  (oak/setup-fonts)
  (oak/load-light-theme)
#+END_SRC

Use variable pitch mode in Info buffers.
#+BEGIN_SRC emacs-lisp
  (add-hook 'Info-mode-hook (lambda ()
                              (variable-pitch-mode)
                              (text-scale-mode 1)
                              (text-scale-increase 1)))
#+END_SRC
* Global Keys
#+begin_src emacs-lisp
  (defun oak/define-global-keymap (keymap) "Define a keymap of global scope."
         (let ((map global-map))
           (define-key map (kbd (car keymap)) (cdr keymap))))

  (defun oak/define-mode-keymap (mode keymap)
    "Define a keymap in the scope of the provided mode."
    (define-key mode (kbd (car keymap)) (cdr keymap)))

  (defun oak/define-global-keymaps (keymaps) "Define a set of keymaps of global scope."
         (dolist (keymap keymaps) (oak/define-global-keymap keymap) nil))

  (defun oak/global-keymaps () "Enables all global keymaps."
         (let ((keymaps '(("C-x cr" . oak/reload-config)
                          ("C-x ctd" . oak/load-dark-theme)
                          ("C-x ctl" . oak/load-light-theme)
                          ("C-x g" . gnus)
                          ("s-w" . eww))))
           (oak/define-global-keymaps keymaps)))

  (oak/global-keymaps)
#+end_src
** Windows
Windows has different behaviour to *nix systems regarding keys. Here
we mainly try to impose *nix patterns on the Window environment.

#+BEGIN_SRC emacs-lisp
  (setq w32-lwindow-modifier 'super) ;; mark Windows key as super
  (setq w32-pass-lwindow-to-system nil)
  ;; (w32-register-hot-key [s-])
#+END_SRC
* Completion
#+begin_src emacs-lisp
  (use-package orderless
    :demand t
    :config
    (setq completion-ignore-case
          read-buffer-completion-ignore-case
          read-file-name-completion-ignore-case t)
    (setq completion-styles '(orderless)))
#+end_src
* Window Management
We define some rules about how certain buffers should appear.  This is
mainly to prevent informative buffers from taking up unnecessary
screen real estate.
#+begin_src emacs-lisp
  (oak/define-global-keymap '("C-x 4 t" . window-toggle-side-windows))

  (setq display-buffer-alist
        `(("\\*Help.*"
           (display-buffer-in-side-window)
           (window-width . 0.3)
           (side . right)
           (slot . 0))
          ("\\*\\(compilation\\|vc-git :\\|dotnet-process\\).*"
           (display-buffer-in-side-window)
           (window-height . 0.20)
           (side . bottom)
           (slot . -1)
           (window-parameters . ((no-other-window . t))))
          ("\\*xref.*"
           (display-buffer-in-side-window)
           (window-height . 0.33)
           (side . bottom)
           (slot . 1))
          ("\\*.*\\(e?shell\\|v?term\\|ansi-term\\).*"
           (display-buffer-reuse-mode-window display-buffer-at-bottom)
           (window-height . 0.2))
          ("^\\(magit:\\|*vc-dir\\).*"
           (display-buffer-in-side-window)
           (side . right)
           (window-width . 0.40))))

  (add-hook 'help-mode-hook #'visual-line-mode)
  (add-hook 'vc-dir-mode-hook #'visual-line-mode)
#+end_src
* Evil                                                              :ARCHIVE:
    Define Evil global keybindings and initialize the mode.
    #+BEGIN_SRC emacs-lisp
      (defun oak/evil-global-keys () "Defines global keybindings using Evil mode."
          (evil-set-leader 'normal (kbd "SPC"))
          (defconst keymaps '(("w" . save-buffer)
                              ("ff" . find-file)
                              ("bd" . kill-buffer)
                              ("bb" . switch-to-buffer)
                              ("." . dired)
                              ("oa" . org-agenda)
                              ("rc" . oak/reload-config)
                              ("dP" . oak/open-config)))

          (oak/define-leader-keymaps keymaps))

      (defun oak/define-leader-keymap (keymap) "Defines a leader keymap for the keymap pairing given."
             (evil-define-key 'normal 'global (kbd (concat "<leader>" (car keymap))) (cdr keymap)))

      (defun oak/define-leader-keymaps (keymaps) "Defines a set of leader keymaps for the keymap pairings given."
           (dolist (keymap keymaps) (oak/define-leader-keymap keymap) nil))

      ;; (use-package evil
      ;;     :ensure t
      ;;     :defer nil
      ;;     :init
      ;;     (setq evil-want-keybinding nil)
      ;;     ;; (evil-mode 1)
      ;;     :config
      ;;     (oak/evil-global-keys)
      ;;     (setq evil-search-wrap t evil-regexp-search t))

      ;; (use-package evil-collection :after (evil))
    #+END_SRC

    Some evil plugins
    #+BEGIN_SRC emacs-lisp
      (use-package evil-commentary
          :ensure t
          :after (evil)
          :init
          (evil-commentary-mode))
    #+END_SRC
* Dired
#+begin_src emacs-lisp
  (defun oak/dired-detailed () "Format dired with detailed listings."
         (setq dired-listing-switches "-lh"))

  (defun oak/dired-concise () "Format dired with concise listings."
         (setq dired-listing-switches "-l1"))

  (defun oak/dired-all () "Format dired with all listings."
         (setq dired-listing-switches "-lah"))

  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'turn-on-gnus-dired-mode)
  (oak/dired-detailed)
#+end_src

Use the elisp =ls= implementation.
#+begin_src emacs-lisp
  (setq ls-lisp-use-insert-directory-program nil)
  (require 'ls-lisp)
#+end_src
* Version Control
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-status magit-blame magit-log-buffer-file magit-log-all)
    :init
    (oak/define-global-keymap '("C-x vb" . magit-blame))
    (oak/define-global-keymap '("C-x vS" . magit-status))
    (oak/define-global-keymap '("C-x vc" . magit-commit)))

  (use-package vc
    :pin gnu
    :commands (vc-dir vc-log-outgoing vc-log-incoming vc-annotate))

#+END_SRC
* Project Management
#+begin_src emacs-lisp
  (require 'oak-project)

  (use-package project
    :demand
    :pin gnu
    :config
    (oak-project/configure))
#+end_src
* Software Development
** Database
#+BEGIN_SRC emacs-lisp
    (setq sql-postgres-login-params
          '((user :default "quetzalcoatl")
            (server :default "nsbstagedb.postgres.database.azure.com")
            (database :default "")))

  (use-package sqlup-mode
    :defer)

    (add-hook 'sql-mode-hook #'sqlup-mode)
    (add-hook 'sql-interative-mode-hook #'sqlup-mode)
    (add-hook 'sql-interactive-mode-hook #'toggle-truncate-lines)
#+END_SRC
** Debugging
By default Emacs has no support for LLDB, mainly due to perceived
competition between GCC and LLVM. Here, we load an extension to Emacs'
default debugger interface, GUD, which provides support for LLDB. The
code was retrieved from [[https://raw.githubusercontent.com/ptrv/emacs.d/master/site-lisp/gud-lldb.el][here]]. Naturally, this extension requires LLDB
is installed on your machine.

#+BEGIN_SRC emacs-lisp
(require 'gud-lldb)
#+END_SRC
** Eglot
The backbone of support for software development
#+begin_src emacs-lisp
  (use-package eglot
    :pin melpa
    :ensure t
    :config
    (setq eglot-confirm-server-initiated-edits nil)

    (let ((omnisharp-path (if WINDOWS
                              "~/bin/omnisharp/OmniSharp.exe"
                            "~/bin/omnisharp/run")))
      (add-to-list 'eglot-server-programs (list 'csharp-mode . (omnisharp-path "-lsp"))))
    (oak/define-mode-keymap eglot-mode-map '("C-. r" . eglot-rename))
    (oak/define-mode-keymap eglot-mode-map '("C-. a" . eglot-code-actions)))
#+end_src
** REST Client
#+begin_src emacs-lisp
(use-package restclient)
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode "\\.md\\'"
    )
#+end_src
** Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    :mode "\\.cshtml\\'"
    :config
    (add-hook 'web-mode-hook #'hl-line-mode)
    (add-hook 'web-mode-hook #'display-line-numbers-mode))

  (add-to-list 'auto-mode-alist  '("\\.css\\'" . web-mode))

  (use-package sass-mode
    :mode "\\.sass\\'"
    :config
    (add-hook 'sass-mode-hook #'hl-line-mode))
#+end_src
** Compilation
#+begin_src emacs-lisp
  (setq compilation-window-height 20)
  (setq compilation-scroll-output t)

  (setq compilation-buffer-name-function
        (lambda (compilation-mode)
          (concat "*" (downcase compilation-mode) "*<" (cdr (project-current)) ">")))
#+end_src
** C#
  #+BEGIN_SRC emacs-lisp
    (require 'oak-dotnet)

    (use-package csharp-mode
      :ensure t
      :mode "\\.cs\\'"
      :hook ((csharp-mode . eglot-ensure)
             (csharp-mode . hl-line-mode)
             (csharp-mode . display-line-numbers-mode)
             (csharp-mode . electric-pair-local-mode)
             (csharp-mode . electric-layout-local-mode))
      :config

      (oak/define-mode-keymap csharp-mode-map '("C-. gi" . eglot-find-implementation))
      (oak/define-mode-keymap csharp-mode-map '("C-. gd" . xref-find-definitions))
      (oak/define-mode-keymap csharp-mode-map '("C-. gr" . xref-find-references)))
  #+END_SRC
** Csv
#+begin_src emacs-lisp
  (use-package csv-mode
    :pin gnu
    :config
    (add-to-list 'auto-mode-alist '("\\.csv\\'" . csv-mode)))
#+end_src
** Javascript
#+begin_src emacs-lisp
  (use-package js2-mode
    :mode "\\.js\\'"
    :hook ((js2-mode . electric-pair-local-mode)
           (js2-mode . electric-layout-local-mode)
           (js2-mode . eglot-ensure)
           (js2-mode . display-line-numbers-mode))
    :config
    ;; (oak/add-auto-mode ".js" js2-mode)
    (oak/define-mode-keymap js2-mode-map '("C-. gi" . eglot-find-implementation))
    (oak/define-mode-keymap js2-mode-map '("C-. gd" . xref-find-definitions))
    (oak/define-mode-keymap js2-mode-map '("C-. gr" . xref-find-references)))
#+end_src
*** NodeJS
**** VueJS
 #+begin_src emacs-lisp
   (define-derived-mode vue-web-mode
     web-mode
     "Vue Web Mode"
     "Major mode for editing Vue.js files."
     (setq-local web-mode-script-padding 0)
     (setq-local web-mode-enable-auto-pairing nil))

   (add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-web-mode))
   (add-hook 'vue-web-mode-hook 'electric-pair-local-mode)
   (add-hook 'vue-web-mode-hook 'electric-layout-local-mode)
   (add-hook 'vue-web-mode-hook 'display-line-numbers-mode)
   (add-hook 'vue-web-mode-hook 'eglot-ensure)
 #+end_src
** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\.yml\\'")
#+END_SRC
** Elisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'eglot-ensure)
  (add-hook 'emacs-lisp-mode-hook #'electric-pair-local-mode)
  (add-hook 'emacs-lisp-mode-hook #'electric-layout-local-mode)
  (add-hook 'emacs-lisp-mode-hook #'flymake-mode)
#+END_SRC
** Nix
Nix provides use with the ability to create replicable development environments on a per project basis.
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
  ;; (oak/add-auto-mode ".nix" nix-mode)
#+end_src
* Ebooks
#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :config
    (defun set-nov-font ()
      (face-remap-add-relative 'variable-pitch
                               :family "Liberation Serif"
                               :height 1.5))
    (setq nov-text-width 80))
#+end_src
* Org
Sane org defaults
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :pin org)

    (use-package org-sticky-header
      :after org
      :hook (org-mode . org-sticky-header-mode))

    (add-to-list 'org-modules 'org-tempo)
    (setq org-directory "~/org/org/")
    (setq oak-org-journal-file (concat org-directory "journal.org.gpg"))
    (setq org-archive-location (concat org-directory "archive/archive_%s::"))
    (setq org-startup-with-latex-preview t)
    (setq org-startup-indented t)
    (setq org-hide-emphasis-markers nil)
    (setq org-footnotes-auto-adjust t)
    (setq org-special-ctrl-a t)
    (setq org-special-ctrl-k t)
    (setq org-tags-column -80) ;; flush tags on the 80th column
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-show-habits-only-for-today nil)
  
  #+END_SRC
** Source block configuration
#+BEGIN_SRC emacs-lisp
  (setq org-src-block-faces '(("emacs-lisp" (:family (when WINDOWS "Cascadia Mono" "Hack")))))
  (setq org-src-fontify-natively t)

  (add-hook 'org-src-mode-hook 'electric-pair-local-mode)
  (add-hook 'org-src-mode-hook 'hl-line-mode)
  (add-hook 'org-src-mode-hook 'electric-layout-local-mode)
#+END_SRC
** Org agenda configuration.
  #+BEGIN_SRC emacs-lisp
    (setq org-agenda-files (list
                            oak-org-journal-file
                            (concat org-directory "work.org.gpg")))

    (setq org-agenda-span 1)
    (setq org-agenda-window-setup 'other-window)
    (setq org-agenda-show-all-dates t)
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-deadline-warning-days 3)
    (setq org-reverse-note-order t)
    (setq org-enforce-todo-dependencies t)
    (setq org-agenda-show-future-repeats "next")
    (setq org-agenda-use-time-grid nil)
    (setq org-agenda-clockreport-parameter-plist '(:link t :maxlevel 4))
    (setq org-agenda-follow-indirect t)

    (oak/define-global-keymap '("C-c oa" . org-agenda))
    (oak/define-global-keymap '("C-c c" . org-capture))

  #+END_SRC
** Org Capture
Org capture is used here to quickly create tasks, and refile them.
#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file oak-org-journal-file)

  (setq org-capture-templates
        `(("t" "Todo" entry
           (file+headline oak-org-journal-file "Captures")
           "* TODO %?\n %a")
          ("p" "Deferred Purchases" entry
           (file+olp oak-org-journal-file "Finance" "Deferred Purchases")
           "* %?\n DEADLINE: %^U")
          ("r" "Reminder" entry
           (file+headline oak-org-journal-file "Reminders")
           "* %?\n %^T\n %a")
           ("d" "Diary" entry
            (file+olp+datetree ,(concat org-directory "diary.org.gpg"))
            "* %?")))
#+END_SRC
** Custom org functions
#+begin_src emacs-lisp
      (defun oak/org-find-file ()
        "Find a file within the org-directory"
        (interactive)
        (let ((default-directory org-directory))
          (find-file (read-file-name "Find org file: "))))

      (defun oak/org-agenda-file-name-to-pair (filename)
        "Get the multple choice pairing for the filename passed as parameter."
        (list (aref (file-name-nondirectory filename) 0) (file-name-nondirectory filename)))

      (defun oak/org-get-agenda-file-choice ()
        "Get the choices of agenda files."
        (mapcar 'oak/org-agenda-file-name-to-pair org-agenda-files))

      (defun oak/org-find-agenda-file (filename)
        "Find the agenda file passed as parameter."
        (find-file (expand-file-name filename org-directory)))

      (defun oak/org-choose-agenda-file ()
        "Choose an agenda file to visit."
        (interactive)
        (let ((default-directory org-directory))
          (oak/org-find-agenda-file (nth 1 (read-multiple-choice "Agenda file:"
                                                               (oak/org-get-agenda-file-choice))))))

      (defun oak/org-sync ()
        "Sync org directory with cloud storage."
        (interactive)
        (shell-command (if (not WINDOWS) "orgsync" "rclone sync C:\\Users\\VNA2\\org oakularorg:org")))

      (oak/define-global-keymap '("C-c of" . oak/org-find-file))
      (oak/define-global-keymap '("C-c oF" . oak/org-choose-agenda-file))
      (oak/define-global-keymap '("C-c os" . oak/org-sync))
  #+end_src
** Refiling
#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path t)
  (setq org-refile-targets '((nil . (:level . 1))))
#+END_SRC
** Eisenhower
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '(("important" . ?i)
                        ("urgent"    . ?u)))

  (setq org-agenda-custom-commands
        '(("1" "Q1" tags-todo "+important+urgent")
          ("2" "Q2" tags-todo "+important-urgent")
          ("3" "Q3" tags-todo "-important+urgent")
          ("4" "Q4" tags-todo "-important-urgent")))
#+END_SRC
* Accounting
Ledger provides a plain text format for double entry bookkeeping. This
ensures portability and longevity of data stored through ledger.

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :mode "\\.ledger\\'")
#+END_SRC
* Encryption
Asymmetric encryption of personal files is a valid goal. One cannot
trust the location they store their files to be secure, especially not
when storage is delegated to the cloud; cloud services are a black
box, and no one outside its maintainers know what is really going on.

#+begin_src emacs-lisp
(epa-file-enable)
#+end_src
* Email
#+begin_src emacs-lisp
  (setq gnus-select-method
        '(nnimap "Email"
                 (nnimap-address "outlook.office365.com")
                 (nnimap-server-port 993)
                 (nnimap-stream ssl)
                 (nnimap-authinfo-file "~/.authinfo")
                 (send-mail-function 'smtpmail-send-it)
                 (smtpmail-smtp-server "smtp.office365.com")
                 (smtpmail-smtp-type 'starttls)
                 (smtpmail-smtp-service 587)))

  (setq message-send-mail-function 'smtpmail-send-it)
  (setq gnus-group-line-format "%P%g: %y%m\n"
        gnus-summary-line-format "%U%R%B %d - %f: %s\n")

  (setq gnus-thread-sort-functions 'gnus-thread-sort-by-most-recent-date)
  (add-hook 'gnus-mode-hook 'gnus-topic-mode)
#+end_src
* Shell
** Direnv
#+begin_src emacs-lisp
  (use-package envrc
    :demand
    :config
    (envrc-global-mode))
#+end_src
** Eshell
#+begin_src emacs-lisp
  (require 'eshell)
  (oak/define-global-keymap '("C-x te" . eshell))
  ;; (oak/define-mode-keymap eshell-mode-map '("M-l" . eshell/clear))
#+end_src
** Commands
#+begin_src emacs-lisp
  (defun oak/restart-vpn () "Restart the openvpn instance."
         (interactive)
         (shell-command "doas sv restart openvpn"))

  (oak/define-global-keymap '("C-x !vr" . oak/restart-vpn))

  (defun oak/suspend () "Suspend the host machine."
         (interactive)
         (shell-command (if (not WINDOWS) "systemctl suspend" "shutdown /h")))

  (defun oak/tokindle () "Sync file(s) to a mounted kindle"
         (interactive)
         (shell-command (concat "tokindle"
                                " "
                                (expand-file-name (read-directory-name "Book(s) location: "))
                                " "
                                (expand-file-name (read-directory-name "Mountpoint: ")))))

  (oak/define-global-keymap '("C-x !s" . oak/suspend))
  (oak/define-global-keymap '("C-x !tk" . oak/tokindle))
#+end_src
* Web browsing
#+BEGIN_SRC emacs-lisp
  (setq shr-cookie-policy nil)
  (setq shr-use-colors nil)
  (setq shr-discard-aria-hidden t)
  (setq eww-header-line-format "%u - %t")

  (setq url-cookie-untrusted-urls '(".*"))
  (setq eww-search-prefix "https://safe.duckduckgo.com/html/?q=")
  (setq eww-bookmarks-directory (expand-file-name (concat user-emacs-directory "eww/bookmarks")))
  (setq eww-history-limit 300)
  (setq eww-browse-url-new-window-is-tab nil)

#+END_SRC
* Media
** Podcast/Video Downloads
#+BEGIN_SRC emacs-lisp
(require 'oak-youtube-dl)
#+END_SRC

