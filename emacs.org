#+TITLE: An Emacs configuration
#+AUTHOR: Callum Warrilow
* Frame
  #+NAME: frame
  #+BEGIN_SRC emacs-lisp
    (line-number-mode t)
    (column-number-mode t)
    (size-indication-mode t)
  #+END_SRC

  Enable yes and no answers from ~y~ and ~n~.
  #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC
* Identity
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Callum Warrilow"
	  user-mail-address "callum_warrilow@outlook.com")
  #+END_SRC
* Sane Defaults
  Customize settings will be stored in a separate file.
  #+BEGIN_SRC emacs-lisp noweb
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (show-paren-mode 1)
    (setq-default indent-tabs-mode nil)
    (save-place-mode 1)
    (setq visible-bell t)

    (defun oak/reload-config () "Reloads the configuration."
           (interactive)
           (load-file (expand-file-name "init.el" user-emacs-directory)))

    (defun oak/open-config () "Open the configuration project in a dired buffer."
              (interactive)
              (dired user-emacs-directory))

    (defun oak/backup-init (dirname) "Sets a backup directory under user-emacs-directory"
           (let ((oak-backup-dir (concat user-emacs-directory dirname)))
             (unless (file-directory-p oak-backup-dir)
               (make-directory oak-backup-dir t))
             (setq backup-directory-alist
                   `(("." . ,oak-backup-dir)))))

    (oak/backup-init "backups")

    (defun oak/add-auto-mode (ext mode) "Appends to pairing parameter to the auto-mode alist"
           (add-to-list 'auto-mode-alist (list (concat "\\" ext "\\'") . 'mode)))

  #+END_SRC
* Package Management Setup
  We set the load path ourselves, and disable ~package.el~ from
  fetching and updating automatically.
  #+BEGIN_SRC emacs-lisp
    (eval-and-compile
      (setq load-prefer-newer t
            package-user-dir (expand-file-name "pkg" user-emacs-directory)
            package--init-file-ensured t
            package-enable-at-startup nil)

      (setq oak-lisp-path (expand-file-name (concat user-emacs-directory "lisp")))
      (add-to-list 'load-path oak-lisp-path)

      (unless (file-directory-p package-user-dir)
        (make-directory package-user-dir t)))

    (defun oak/instantiate-load-path ()
      "Add all subdirectories of package-user-dir to the load-path"
      (let ((default-directory package-user-dir))
        (normal-top-level-add-subdirs-to-load-path)))


  #+END_SRC

  Install [[https://github.com/jwiegley/use-package][use-package]]
  #+BEGIN_SRC emacs-lisp
    (eval-when-compile
      (require 'package)

      (unless (assoc-default "melpa" package-archives)
        (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
      (unless (assoc-default "org" package-archives)
        (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

      (package-initialize)
      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))

      (require 'use-package)
      (setq use-package-always-ensure t
            use-package-always-defer t
            use-package-verbose t))
  #+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
  (defun oak/setup-fonts () "Setup basic font configuration."
         (set-face-attribute 'default nil :height 80)
         (set-face-attribute 'default nil :width 'ultra-condensed)
         (set-face-attribute 'default nil :family (when WINDOWS "Cascadia Mono" "Hack")))

  (use-package modus-themes
    :ensure t
    :demand
    :pin gnu
    :config
    (setq modus-themes-paren-match 'subtle-bold)
    (setq modus-themes-mode-line '3d)
    (setq modus-themes-bold-constructs t)
    (load-theme 'modus-operandi t))

  (defvar oak-dark-theme 'modus-vivendi)
  (defvar oak-light-theme 'modus-operandi)

  (defun oak/load-dark-theme ()
    (interactive)
    (load-theme oak-dark-theme t))

  (defun oak/load-light-theme ()
    (interactive)
    (load-theme oak-light-theme t))

  (oak/setup-fonts)
#+END_SRC
* Global Keys
#+begin_src emacs-lisp
    (defun oak/define-global-keymap (keymap) "Define a keymap of global scope."
           (let ((map global-map))
             (define-key map (kbd (car keymap)) (cdr keymap))))

    (defun oak/define-mode-keymap (mode keymap)
      "Define a keymap in the scope of the provided mode."
      (define-key mode (kbd (car keymap)) (cdr keymap)))

    (defun oak/define-global-keymaps (keymaps) "Define a set of keymaps of global scope."
           (dolist (keymap keymaps) (oak/define-global-keymap keymap) nil))

    (defun oak/global-keymaps () "Enables all global keymaps."
           (let ((keymaps '(("C-x cr" . oak/reload-config)
                            ("C-x ctd" . oak/load-dark-theme)
                            ("C-x ctl" . oak/load-light-theme)
                            ("C-x g" . gnus)
                            ("s-w" . eww))))
             (oak/define-global-keymaps keymaps)))

    (oak/global-keymaps)
#+end_src
* Completion
#+begin_src emacs-lisp
  (use-package icomplete-vertical
    :demand t
    :custom
    (completion-category-overrides '((file (styles basic substring))))
    (read-file-name-completion-ignore-case t)
    (read-buffer-completion-ignore-case t)
    (completion-ignore-case t)
    :config
    (fido-mode)
    (icomplete-vertical-mode)
    :bind (:map icomplete-minibuffer-map
                ("<down>" . icomplete-forward-completions)
                ("C-n" . icomplete-forward-completions)
                ("<up>" . icomplete-backward-completions)
                ("C-p" . icomplete-backward-completions)))
#+end_src
* Window Management
We define some rules about how certain buffers should appear.  This is
mainly to prevent informative buffers from taking up unnecessary
screen real estate.
#+begin_src emacs-lisp
  (oak/define-global-keymap '("C-x 4 t" . window-toggle-side-windows))

  (setq display-buffer-alist
        `(("\\*Help.*"
           (display-buffer-in-side-window)
           (window-width . 0.3)
           (side . right)
           (slot . 0))
          ("\\*\\(compilation\\|vc-git :\\).*"
           (display-buffer-in-side-window)
           (window-height . 0.20)
           (side . bottom)
           (slot . -1)
           (window-parameters . ((no-other-window . t))))
          ("\\*xref.*"
           (display-buffer-in-side-window)
           (window-height . 0.33)
           (side . bottom)
           (slot . 1))
          ("\\*.*\\(e?shell\\|v?term\\|ansi-term\\).*"
           (display-buffer-reuse-mode-window display-buffer-at-bottom)
           (window-height . 0.2))
          ("^\\(magit:\\|*vc-dir\\).*"
           (display-buffer-in-side-window)
           (side . right)
           (window-width . 0.40))))

  (add-hook 'help-mode-hook #'visual-line-mode)
  (add-hook 'vc-dir-mode-hook #'visual-line-mode)
#+end_src
* Evil                                                              :ARCHIVE:
    Define Evil global keybindings and initialize the mode.
    #+BEGIN_SRC emacs-lisp
      (defun oak/evil-global-keys () "Defines global keybindings using Evil mode."
          (evil-set-leader 'normal (kbd "SPC"))
          (defconst keymaps '(("w" . save-buffer)
                              ("ff" . find-file)
                              ("bd" . kill-buffer)
                              ("bb" . switch-to-buffer)
                              ("." . dired)
                              ("oa" . org-agenda)
                              ("rc" . oak/reload-config)
                              ("dP" . oak/open-config)))

          (oak/define-leader-keymaps keymaps))

      (defun oak/define-leader-keymap (keymap) "Defines a leader keymap for the keymap pairing given."
             (evil-define-key 'normal 'global (kbd (concat "<leader>" (car keymap))) (cdr keymap)))

      (defun oak/define-leader-keymaps (keymaps) "Defines a set of leader keymaps for the keymap pairings given."
           (dolist (keymap keymaps) (oak/define-leader-keymap keymap) nil))

      ;; (use-package evil
      ;;     :ensure t
      ;;     :defer nil
      ;;     :init
      ;;     (setq evil-want-keybinding nil)
      ;;     ;; (evil-mode 1)
      ;;     :config
      ;;     (oak/evil-global-keys)
      ;;     (setq evil-search-wrap t evil-regexp-search t))

      ;; (use-package evil-collection :after (evil))
    #+END_SRC

    Some evil plugins
    #+BEGIN_SRC emacs-lisp
      (use-package evil-commentary
          :ensure t
          :after (evil)
          :init
          (evil-commentary-mode))
    #+END_SRC
* Dired
#+begin_src emacs-lisp
  (defun oak/dired-detailed () "Format dired with detailed listings."
         (setq dired-listing-switches "-lh"))

  (defun oak/dired-concise () "Format dired with concise listings."
         (setq dired-listing-switches "-l1"))

  (defun oak/dired-all () "Format dired with all listings."
         (setq dired-listing-switches "-lah"))

  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'turn-on-gnus-dired-mode)
  (oak/dired-detailed)
#+end_src

Use the elisp =ls= implementation.
#+begin_src emacs-lisp
  (setq ls-lisp-use-insert-directory-program nil)
  (require 'ls-lisp)
#+end_src
* Version Control
#+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :commands (magit-status magit-blame magit-log-buffer-file magit-log-all)
      :init
      (oak/define-global-keymap '("C-x vcm" . magit-status))
      (oak/define-global-keymap '("C-x vb" . magit-blame)))

    (use-package vc
      :pin gnu
      :commands (vc-dir vc-log-outgoing vc-log-incoming vc-annotate))

#+END_SRC
* Project Management
#+begin_src emacs-lisp
  (defun oak/project () "Setup project.el"
         (setq project-vc-merge-submodules nil))

  (defun oak/shell-command-project-root (cmd)
    "Run a shell command in the root of the current project."
    (oak/exec-fun-project-root (shell-command cmd)))

  (defun oak/exec-fun-project-root (fun)
    "Execute a function in the context of the project root."
    (let ((default-directory (vc-root-dir)))
      (funcall fun)))

  (use-package project
    :demand
    :pin gnu
    :config
    (oak/project))
#+end_src
* Software Development
** Database
#+BEGIN_SRC emacs-lisp
    (setq sql-postgres-login-params
          '((user :default "quetzalcoatl")
            (server :default "nsbstagedb.postgres.database.azure.com")
            (database :default "")))

  (use-package sqlup-mode
    :defer)

    (add-hook 'sql-mode-hook #'sqlup-mode)
    (add-hook 'sql-interative-mode-hook #'sqlup-mode)
    (add-hook 'sql-interactive-mode-hook #'toggle-truncate-lines)
#+END_SRC
** Eglot
The backbone of support for software development
#+begin_src emacs-lisp
  (use-package eglot
    :pin melpa
    :ensure t
    :config
    (setq eglot-confirm-server-initiated-edits nil)
  
    (let ((omnisharp-path (if WINDOWS
                                "~/bin/omnisharp/OmniSharp.exe"
                              "~/bin/omnisharp/run")))
        (add-to-list 'eglot-server-programs (list 'csharp-mode . (omnisharp-path "-lsp")))))
#+end_src
** REST Client
#+begin_src emacs-lisp
(use-package restclient)
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode "\\.md\\'"
    )
#+end_src
** Web Mode
#+begin_src emacs-lisp
  (use-package web-mode
    :mode "\\.cshtml\\'"
    :config
    (add-hook 'web-mode-hook #'hl-line-mode))

  (add-to-list 'auto-mode-alist  '("\\.css\\'" . web-mode))

  (use-package sass-mode
    :mode "\\.sass\\'"
    :config
    (add-hook 'sass-mode-hook #'hl-line-mode))
#+end_src
** Compilation
#+begin_src emacs-lisp
  (setq compilation-window-height 20)
  (setq compilation-scroll-output t)

  (setq compilation-buffer-name-function
        (lambda (compilation-mode)
          (concat "*" (downcase compilation-mode) "*<" (cdr (project-current)) ">")))
#+end_src
** C#
  #+BEGIN_SRC emacs-lisp
      (use-package csharp-mode
        :ensure t
        :mode "\\.cs\\'"
        :hook (csharp-mode . eglot-ensure)
        :config
        (add-hook 'csharp-mode-hook #'display-line-numbers-mode)
        (add-hook 'csharp-mode-hook #'hl-line-mode)
        (add-hook 'csharp-mode-hook #'electric-pair-local-mode)

        (oak/define-mode-keymap csharp-mode-map '("C-. a" . eglot-code-actions))
        (oak/define-mode-keymap csharp-mode-map '("C-. gi" . eglot-find-implementation))
        (oak/define-mode-keymap csharp-mode-map '("C-. gd" . xref-find-definitions))
        (oak/define-mode-keymap csharp-mode-map '("C-. gr" . xref-find-references))
        (oak/define-mode-keymap csharp-mode-map '("C-. r" . eglot-rename)))
  #+END_SRC

Define functions for migrations.
  #+begin_src emacs-lisp
    (defconst dotnet-command "dotnet")
    (defvar oak-dotnet-migration-project nil
      "The project directory (relative or absolute) containing project migrations.")

    (defvar oak-dotnet-prompt-for-context nil
      "Determine whether the user should be prompted for the context name when running migration commands")

    (defun oak/dotnet-get-migration-project ()
      "Gets the migration project if set as a variable, and fallsback to user input."
      (expand-file-name
       (or oak-dotnet-migration-project (read-directory-name "Project directory: "))))

    (defun oak/dotnet-get-context-name ()
      "Gets the name of the context if oak-dotnet-prompt-for-context is set."
      (when oak-dotnet-prompt-for-context (read-string "Context: ")))

    (defun oak/dotnet-migration-add (migration-name project &optional context)
      "Add a migration to the given project"
      (oak/shell-command-project-root
       (oak/build-shell-cmd
        (list "dotnet" "ef" "migrations" "add" "-p" project
              (when context (concat "-c" " " context))
              migration-name))))

    (defun oak/dotnet-migration-remove (project &optional context)
      "Remove the latest migration from the given project"
      (oak/shell-command-project-root
       (oak/build-shell-cmd
        (list "dotnet" "ef" "migrations" "remove"
              "-p" project
              (when context (concat "-c" " " context))))))

    (defun oak/dotnet-update-database (project &optional context)
      "Update the database for the given project and context"
      (oak/shell-command-project-root
       (oak/build-shell-cmd
        (list "dotnet" "ef" "database" "update"
              "-p" project 
              (when context (concat "-c" " " context))))))

    (defun oak/dotnet-drop-database (project &optional context)
      "Drop the database for the given project and context"
      (oak/shell-command-project-root
       (oak/build-shell-cmd
        (list "dotnet" "ef" "database" "drop"
              "-p" project 
              (when context (concat "-c" " " context))))))

    (defun oak/do-dotnet-migration-add ()
      "Interactively add a migration."
      (interactive)
      (oak/exec-fun-project-root
       (oak/dotnet-migration-add (read-string "Migration name: ")
                                 (oak/dotnet-get-migration-project)
                                 (oak/dotnet-get-context-name))))

    (defun oak/do-dotnet-migration-remove ()
      "Interactively remove the latest migration."
      (interactive)
      (oak/exec-fun-project-root
       (oak/dotnet-migration-remove (oak/dotnet-get-migration-project)
                                    (oak/dotnet-get-context-name))))


    (defun oak/do-dotnet-update-database ()
      "Interactively update the database"
      (interactive)
      (oak/exec-fun-project-root
       (oak/dotnet-update-database (oak/dotnet-get-migration-project)
                                   (oak/dotnet-get-context-name))))

    (defun oak/do-dotnet-drop-database ()
      "Interactively update the database"
      (interactive)
      (oak/exec-fun-project-root
       (oak/dotnet-drop-database (oak/dotnet-get-migration-project)
                                 (oak/dotnet-get-context-name))))
  #+end_src

Define functions for package handling
#+begin_src emacs-lisp
  (defun oak/dotnet-add-package (project package-name)
    "Add the given package to the given project."
    (oak/shell-command-project-root
     (oak/build-shell-cmd
      (list dotnet-command "add"
            project
            "package"
            package-name))))

  (defun oak/dotnet-remove-package (project package-name)
    "Remove the given package from the given project."
    (oak/shell-command-project-root
     (oak/build-shell-cmd
      (list dotnet-command "remove"
            project
            "package"
            package-name))))

  (defun oak/do-dotnet-add-package ()
        "Add a package to a project."
        (interactive)
        (oak/exec-fun-project-root
         (oak/dotnet-add-package (read-directory-name "Project: ")
                                 (read-string "Package: "))))

  (defun oak/do-dotnet-remove-package ()
        "Remove a package from a project."
        (interactive)
        (oak/exec-fun-project-root
         (oak/dotnet-remove-package (read-directory-name "Project: ")
                                   (read-string "Package: "))))
#+end_src

Define functions for cleaning projects
#+BEGIN_SRC emacs-lisp
    (defun oak/dotnet-clean-project ()
      "Clean the current project."
      (oak/shell-command-project-root
       (oak/build-shell-cmd
        (list dotnet-command "clean"))))

    (defun oak/do-dotnet-clean-project ()
      "Clean the current project."
      (interactive)
      (oak/dotnet-clean-project)g)
#+END_SRC
** Csv
#+begin_src emacs-lisp
  (use-package csv-mode
    :pin gnu
    :config
    (add-to-list 'auto-mode-alist '("\\.csv\\'" . csv-mode)))
#+end_src
** Javascript
#+begin_src emacs-lisp
  (use-package js2-mode
    :after eglot
    :mode "\\.js\\'")
#+end_src
*** NodeJS
**** VueJS
 #+begin_src emacs-lisp
     (define-derived-mode vue-web-mode web-mode "Vue Web Mode")
     (add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-web-mode))
     (setq vue-web-mode-script-padding 0)
     (add-hook 'vue-web-mode-hook 'eglot-ensure)
 #+end_src
** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\.yml\\'")
#+END_SRC
* Ebooks
#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :config
    (defun set-nov-font ()
      (face-remap-add-relative 'variable-pitch
                               :family "Liberation Serif"
                               :height 1.5))
    (setq nov-text-width 80))
#+end_src
* Org
Sane org defaults
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :pin org)

    (use-package org-sticky-header
      :after org
      :hook (org-mode . org-sticky-header-mode))

    (setq org-directory "~/org/org/")
    (setq org-archive-location (concat org-directory "archive/%s_archive::"))
    (setq org-startup-with-latex-preview t)
    (setq org-startup-indented t)
    (setq org-hide-emphasis-markers nil)
    (setq org-footnotes-auto-adjust t)
    (setq org-special-ctrl-a t)
    (setq org-special-ctrl-k t)
  #+END_SRC

Org agenda configuration.
  #+BEGIN_SRC emacs-lisp
    (setq org-agenda-files (list
                            (concat org-directory "journal.org")
                            (concat org-directory "work.org")))

    (setq org-agenda-span 1)
    (setq org-agenda-window-setup 'other-window)
    (setq org-agenda-show-all-dates t)
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-deadline-warning-days 3)
    (setq org-reverse-note-order t)
    (setq org-enforce-todo-dependencies t)
    (setq org-agenda-show-future-repeats "next")
    (setq org-agenda-use-time-grid nil)
    (setq org-agenda-clockreport-parameter-plist '(:link t :maxlevel 4))
    (setq org-agenda-follow-indirect t)

    (oak/define-global-keymap '("C-c oa" . org-agenda))
    (oak/define-global-keymap '("C-c c" . org-capture))

  #+END_SRC

  Custom org functions
  #+begin_src emacs-lisp
    (defun oak/org-find-file ()
      "Find a file within the org-directory"
      (interactive)
      (let ((default-directory org-directory))
        (find-file (read-file-name "Find org file: "))))

    (defun oak/org-agenda-file-name-to-pair (filename)
      "Get the multple choice pairing for the filename passed as parameter."
      (list (aref (file-name-nondirectory filename) 0) (file-name-nondirectory filename)))

    (defun oak/org-get-agenda-file-choice ()
      "Get the choices of agenda files."
      (mapcar 'oak/org-agenda-file-name-to-pair org-agenda-files))

    (defun oak/org-find-agenda-file (filename)
      "Find the agenda file passed as parameter."
      (find-file (expand-file-name filename org-directory)))

    (defun oak/org-choose-agenda-file ()
      "Choose an agenda file to visit."
      (interactive)
      (let ((default-directory org-directory))
        (oak/org-find-agenda-file (nth 1 (read-multiple-choice "Agenda file:"
                                                             (oak/org-get-agenda-file-choice))))))

    (defun oak/org-sync ()
      "Sync org directory with cloud storage."
      (interactive)
      (shell-command (if (not WINDOWS) "orgsync" "rclone sync C:\\Users\\VNA2\\org oakularorg:org")))

    (oak/define-global-keymap '("C-c of" . oak/org-find-file))
    (oak/define-global-keymap '("C-c oF" . oak/org-choose-agenda-file))
    (oak/define-global-keymap '("C-c os" . oak/org-sync))
  #+end_src
** Eisenhower
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '(("important" . ?i)
                        ("urgent"    . ?u)))

  (setq org-agenda-custom-commands
        '(("1" "Q1" tags-todo "+important+urgent")
          ("2" "Q2" tags-todo "+important-urgent")
          ("3" "Q3" tags-todo "-important+urgent")
          ("4" "Q4" tags-todo "-important-urgent")))
#+END_SRC
* Email
#+begin_src emacs-lisp
  (use-package gnus
    :hook (gnus-mode . gnus-topic-mode)
    :config
    (setq gnus-select-method
          '(nnimap "Email"
                   (nnimap-address "outlook.office365.com")
                   (nnimap-server-port 993)
                   (nnimap-stream ssl)
                   (nnimap-authinfo-file "~/.authinfo")
                   (send-mail-function 'smtpmail-send-it)
                   (smtpmail-smtp-server "smtp.office365.com")
                   (smtpmail-smtp-type 'starttls)
                   (smtpmail-smtp-service 587)))

    (setq message-send-mail-function 'smtpmail-send-it)
    (setq gnus-group-line-format "%P%g: %y%m\n"
          gnus-summary-line-format "%U%R%B %d - %f: %s\n")

    (setq gnus-thread-sort-functions 'gnus-thread-sort-by-most-recent-date))
#+end_src
* Shell
#+begin_src emacs-lisp
  (defvar oak-shell "/bin/bash" "The default shell to be used.")

  (defun oak/term () "Opens an ansi-term buffer using the shell set by oak-shell"
         (interactive)
         (ansi-term oak-shell))

  (defun oak/build-shell-cmd (cmd-elements)
    "Build a command string from the elements passed as parameter."
    (mapconcat 'identity cmd-elements " "))

  (oak/define-global-keymap '("C-x tt" . oak/term))
#+end_src
** Direnv
#+begin_src emacs-lisp
  (use-package envrc
    :demand
    :config
    (envrc-global-mode))
#+end_src
** Eshell
#+begin_src emacs-lisp
(oak/define-global-keymap '("C-x te" . eshell))
#+end_src
** Commands
#+begin_src emacs-lisp
  (defun oak/restart-vpn () "Restart the openvpn instance."
         (interactive)
         (shell-command "doas sv restart openvpn"))

  (oak/define-global-keymap '("C-x !vr" . oak/restart-vpn))

  (defun oak/suspend () "Suspend the host machine."
         (interactive)
         (shell-command (if (not WINDOWS) "loginctl suspend" "shutdown /h")))

  (defun oak/tokindle () "Sync file(s) to a mounted kindle"
         (interactive)
         (shell-command (concat "tokindle"
                                " "
                                (expand-file-name (read-directory-name "Book(s) location: "))
                                " "
                                (expand-file-name (read-directory-name "Mountpoint: ")))))

  (oak/define-global-keymap '("C-x !s" . oak/suspend))
  (oak/define-global-keymap '("C-x !tk" . oak/tokindle))
#+end_src
* Web browsing
#+BEGIN_SRC emacs-lisp
(setq eww-header-line-format "%u - %t")
#+END_SRC
* Media
** Podcast/Video Downloads
#+BEGIN_SRC emacs-lisp
(require 'oak-youtube-dl)
#+END_SRC
